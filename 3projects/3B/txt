Conduct performance analysis.  Factors to consider:
-- how do dictionaries based on arrays compare with dictionaries based on hash tables?
-- how does hash table performance change as a result of hash table size?
-- how does hash table performance change with good hash functions vs bad hash functions?  (see hash1 / hash2 from Lec 15)

You will then write a short report.  Imagine this is for your job and your manager asked you to compare the two approaches and dig deeper on hash table performance.  It may be just a paragraph.  It should definitely be supported by numbers for your experimental runtimes and your conclusion.  
Paragraph
Write about peformence time and difference between array dict and HashTable
Site actual experiments 


The timing for hash table's are heavily based on your hash functions. When I used very weak hash functions like {key % MAX_SIZE} it caused a lot of collisions. The hash function from the Sventek book was the fastest hash function to use but it always causes a small number of collisions. I took that into consideration and looked for another polynomial hash function on the internet. After doing some research I found that the djb2 and polynomial rolling hash functions were the most efficent string hash functions to use for double hashing. They had a fast execution time and also caused 0 collisions.The MAX_SIZE of an array of a hashtable can't be lower the amount of items you want to store. But if you change the MAX_SIZE for the Hashtable and Array dict to around a cap of 695000. The timings for both increase by a minuscule amount. The timings for both become around 0.013000. Nothing to insane. But where Hashtables vary from Array dicts is the when you fetch. The Hash Table has a time complexity of O(1). No matter many items we need to fetch the timing always stays the same. The average execution time I got for my hash table fetch was around 0.000053. And that average never changed no matter how many items I had to fetch.

AVERAGE PROGRAM EXECUTION TIME (Hash Table)
Fetching 91 keys = 0.010000
Fetching 182 keys = 0.010000
Fetching 364 keys = 0.010000
Fetching 728 keys = 0.010000
Fetching 1456 keys = 0.010000
Fetching 2912 keys = 0.010000
Fetching 5824 keys = 0.010000

AVERAGE PROGRAM EXECUTION TIME (Array Dict)
Fetching 91 keys = 0.011000
Fetching 182 keys = 0.010000
Fetching 364 keys = 0.020000
Fetching 728 keys = 0.26256
Fetching 1456 keys = 0.40974


